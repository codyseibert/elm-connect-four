var _user$project$Main$updateCell = F2(
	function (cell, board) {
		return A2(
			_elm_lang$core$List$map,
			function (c) {
				return (_elm_lang$core$Native_Utils.eq(c.i, cell.i) && _elm_lang$core$Native_Utils.eq(c.j, cell.j)) ? cell : c;
			},
			board);
	});
var _user$project$Main$cartesian = F2(
	function (xs, ys) {
		return A2(
			_elm_lang$core$List$concatMap,
			function (x) {
				return A2(
					_elm_lang$core$List$map,
					function (y) {
						return {ctor: '_Tuple2', _0: x, _1: y};
					},
					ys);
			},
			xs);
	});
var _user$project$Main$Cell = F4(
	function (a, b, c, d) {
		return {i: a, j: b, hovered: c, state: d};
	});
var _user$project$Main$Model = F5(
	function (a, b, c, d, e) {
		return {board: a, isPlayersTurn: b, seed: c, isGameOver: d, winner: e};
	});
var _user$project$Main$Red = {ctor: 'Red'};
var _user$project$Main$Blue = {ctor: 'Blue'};
var _user$project$Main$Open = {ctor: 'Open'};
var _user$project$Main$createBoard = F2(
	function (rows, cols) {
		return A2(
			_elm_lang$core$List$map,
			function (_p0) {
				var _p1 = _p0;
				return {i: _p1._0, j: _p1._1, hovered: false, state: _user$project$Main$Open};
			},
			A2(
				_user$project$Main$cartesian,
				_elm_lang$core$Native_List.range(0, rows - 1),
				_elm_lang$core$Native_List.range(0, cols - 1)));
	});
var _user$project$Main$model = {
	board: A2(_user$project$Main$createBoard, 6, 7),
	isPlayersTurn: true,
	seed: _elm_lang$core$Random$initialSeed(31415),
	isGameOver: false,
	winner: _user$project$Main$Blue
};
var _user$project$Main$getRandomOpenColumn = F2(
	function (board, seed) {
		var openCells = A2(
			_elm_lang$core$List$filter,
			function (c) {
				return _elm_lang$core$Native_Utils.eq(c.state, _user$project$Main$Open);
			},
			board);
		var gen = A2(
			_elm_lang$core$Random$int,
			0,
			_elm_lang$core$List$length(openCells));
		var _p2 = A2(_elm_lang$core$Random$step, gen, seed);
		var ri = _p2._0;
		var seed$ = _p2._1;
		var openCellsArray = _elm_lang$core$Array$fromList(openCells);
		var cell = A2(_elm_lang$core$Array$get, ri, openCellsArray);
		var _p3 = cell;
		if (_p3.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: 0, _1: seed$};
		} else {
			return {ctor: '_Tuple2', _0: _p3._0.j, _1: seed$};
		}
	});
var _user$project$Main$dropCellIntoColumn = F3(
	function (j, board, color) {
		var openCellsInRow = A2(
			_elm_lang$core$List$filter,
			function (c) {
				return _elm_lang$core$Native_Utils.eq(c.j, j) && _elm_lang$core$Native_Utils.eq(c.state, _user$project$Main$Open);
			},
			board);
		var openCellInRow = function (i) {
			return A2(
				_elm_lang$core$List$filter,
				function (c) {
					return _elm_lang$core$Native_Utils.eq(c.i, i);
				},
				openCellsInRow);
		};
		var rows = _elm_lang$core$List$reverse(
			_elm_lang$core$Native_List.range(0, 5));
		var cellToFill = _elm_lang$core$List$head(
			_elm_lang$core$List$concat(
				A2(_elm_lang$core$List$map, openCellInRow, rows)));
		var _p4 = cellToFill;
		if (_p4.ctor === 'Nothing') {
			return board;
		} else {
			return A2(
				_user$project$Main$updateCell,
				_elm_lang$core$Native_Utils.update(
					_p4._0,
					{state: color}),
				board);
		}
	});
var _user$project$Main$isGameOver = function (board) {
	var checkHorizontal = F2(
		function (row, color) {
			var colsInRow = A2(
				_elm_lang$core$List$map,
				function (c) {
					return c.j;
				},
				A2(
					_elm_lang$core$List$filter,
					function (c) {
						return _elm_lang$core$Native_Utils.eq(c.i, row) && _elm_lang$core$Native_Utils.eq(c.state, color);
					},
					board));
			var colsToCheck = _elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Native_List.fromArray(
					[0, 1, 2, 3]),
					_elm_lang$core$Native_List.fromArray(
					[1, 2, 3, 4]),
					_elm_lang$core$Native_List.fromArray(
					[2, 3, 4, 5]),
					_elm_lang$core$Native_List.fromArray(
					[3, 4, 5, 6])
				]);
			var isConnected = A2(
				_elm_lang$core$List$any,
				function (set) {
					return _elm_lang$core$Native_Utils.eq(
						4,
						_elm_lang$core$Set$size(set));
				},
				A2(
					_elm_lang$core$List$map,
					function (s) {
						return A2(
							_elm_lang$core$Set$intersect,
							_elm_lang$core$Set$fromList(s),
							_elm_lang$core$Set$fromList(colsInRow));
					},
					colsToCheck));
			return isConnected;
		});
	var checkVertical = F2(
		function (col, color) {
			var rowsInCol = A2(
				_elm_lang$core$List$map,
				function (c) {
					return c.i;
				},
				A2(
					_elm_lang$core$List$filter,
					function (c) {
						return _elm_lang$core$Native_Utils.eq(c.j, col) && _elm_lang$core$Native_Utils.eq(c.state, color);
					},
					board));
			var rowsToCheck = _elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Native_List.fromArray(
					[0, 1, 2, 3]),
					_elm_lang$core$Native_List.fromArray(
					[1, 2, 3, 4]),
					_elm_lang$core$Native_List.fromArray(
					[2, 3, 4, 5])
				]);
			var isConnected = A2(
				_elm_lang$core$List$any,
				function (set) {
					return _elm_lang$core$Native_Utils.eq(
						4,
						_elm_lang$core$Set$size(set));
				},
				A2(
					_elm_lang$core$List$map,
					function (s) {
						return A2(
							_elm_lang$core$Set$intersect,
							_elm_lang$core$Set$fromList(s),
							_elm_lang$core$Set$fromList(rowsInCol));
					},
					rowsToCheck));
			return isConnected;
		});
	var checkAllCols = function (color) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return a;
			},
			A2(
				_elm_lang$core$List$map,
				function (i) {
					return A2(checkVertical, i, color);
				},
				_elm_lang$core$Native_List.range(0, 6)));
	};
	var checkAllRows = function (color) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return a;
			},
			A2(
				_elm_lang$core$List$map,
				function (i) {
					return A2(checkHorizontal, i, color);
				},
				_elm_lang$core$Native_List.range(0, 5)));
	};
	var blueWon = checkAllRows(_user$project$Main$Blue) || checkAllCols(_user$project$Main$Blue);
	var redWon = checkAllRows(_user$project$Main$Red) || checkAllCols(_user$project$Main$Red);
	return blueWon ? _user$project$Main$Blue : (redWon ? _user$project$Main$Red : _user$project$Main$Open);
};
var _user$project$Main$AIStep = {ctor: 'AIStep'};
var _user$project$Main$PiecePlaced = {ctor: 'PiecePlaced'};
var _user$project$Main$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p5 = msg;
			switch (_p5.ctor) {
				case 'Tick':
					var t = _elm_lang$core$Basics$floor(_p5._0);
					var seed$ = _elm_lang$core$Random$initialSeed(t);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{seed: seed$}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'OnCellEnter':
					var _p6 = _p5._0;
					return ((!_elm_lang$core$Native_Utils.eq(_p6.state, _user$project$Main$Open)) || model.isGameOver) ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								board: A2(
									_user$project$Main$updateCell,
									_elm_lang$core$Native_Utils.update(
										_p6,
										{hovered: true}),
									model.board)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'OnCellLeave':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								board: A2(
									_user$project$Main$updateCell,
									_elm_lang$core$Native_Utils.update(
										_p5._0,
										{hovered: false}),
									model.board)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'AIStep':
					var _p7 = A2(_user$project$Main$getRandomOpenColumn, model.board, model.seed);
					var randomCol = _p7._0;
					var seed$ = _p7._1;
					var board$ = A3(_user$project$Main$dropCellIntoColumn, randomCol, model.board, _user$project$Main$Red);
					var _v4 = _user$project$Main$PiecePlaced,
						_v5 = _elm_lang$core$Native_Utils.update(
						model,
						{seed: seed$, board: board$});
					msg = _v4;
					model = _v5;
					continue update;
				case 'PiecePlaced':
					var winner = _user$project$Main$isGameOver(model.board);
					return (!_elm_lang$core$Native_Utils.eq(winner, _user$project$Main$Open)) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{isGameOver: true, winner: winner}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				default:
					var _p9 = _p5._0;
					if ((!_elm_lang$core$Native_Utils.eq(_p9.state, _user$project$Main$Open)) || model.isGameOver) {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var _p8 = A2(
							_user$project$Main$update,
							_user$project$Main$PiecePlaced,
							_elm_lang$core$Native_Utils.update(
								model,
								{
									board: A3(_user$project$Main$dropCellIntoColumn, _p9.j, model.board, _user$project$Main$Blue)
								}));
						var m = _p8._0;
						var c = _p8._1;
						if (m.isGameOver) {
							return {ctor: '_Tuple2', _0: m, _1: _elm_lang$core$Platform_Cmd$none};
						} else {
							var _v6 = _user$project$Main$AIStep,
								_v7 = m;
							msg = _v6;
							model = _v7;
							continue update;
						}
					}
			}
		}
	});
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$Tick);
};
var _user$project$Main$init = function () {
	var cmd = A3(
		_elm_lang$core$Task$perform,
		function (x) {
			return _user$project$Main$Tick(523942);
		},
		function (a) {
			return _user$project$Main$Tick(a);
		},
		_elm_lang$core$Time$now);
	return {ctor: '_Tuple2', _0: _user$project$Main$model, _1: cmd};
}();
var _user$project$Main$OnCellClick = function (a) {
	return {ctor: 'OnCellClick', _0: a};
};
var _user$project$Main$OnCellLeave = function (a) {
	return {ctor: 'OnCellLeave', _0: a};
};
var _user$project$Main$OnCellEnter = function (a) {
	return {ctor: 'OnCellEnter', _0: a};
};
var _user$project$Main$view = function (model) {
	var boardStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 'background-color', _1: 'yellow'},
				{ctor: '_Tuple2', _0: 'width', _1: '700px'},
				{ctor: '_Tuple2', _0: 'height', _1: '600px'},
				{ctor: '_Tuple2', _0: 'margin', _1: '0 auto'},
				{ctor: '_Tuple2', _0: 'padding-top', _1: '40px'},
				{ctor: '_Tuple2', _0: 'position', _1: 'relative'}
			]));
	var getY = F2(
		function (i, w) {
			return (i * w) + 5;
		});
	var getX = F2(
		function (j, w) {
			return (j * w) + 5;
		});
	var cellSize = 100;
	var cellStyle = function (cell) {
		return _elm_lang$html$Html_Attributes$style(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
					{
					ctor: '_Tuple2',
					_0: 'top',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							A2(getY, cell.i, cellSize)),
						'px')
				},
					{
					ctor: '_Tuple2',
					_0: 'left',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							A2(getX, cell.j, cellSize)),
						'px')
				},
					{ctor: '_Tuple2', _0: 'background-color', _1: 'white'},
					{ctor: '_Tuple2', _0: 'width', _1: '90px'},
					{ctor: '_Tuple2', _0: 'height', _1: '90px'},
					{ctor: '_Tuple2', _0: 'border-radius', _1: '50%'},
					cell.hovered ? {ctor: '_Tuple2', _0: 'border', _1: '2px solid red'} : {ctor: '_Tuple2', _0: '', _1: ''},
					_elm_lang$core$Native_Utils.eq(cell.state, _user$project$Main$Blue) ? {ctor: '_Tuple2', _0: 'background-color', _1: 'blue'} : (_elm_lang$core$Native_Utils.eq(cell.state, _user$project$Main$Red) ? {ctor: '_Tuple2', _0: 'background-color', _1: 'red'} : {ctor: '_Tuple2', _0: '', _1: ''})
				]));
	};
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$style(
						_elm_lang$core$Native_List.fromArray(
							[
								{ctor: '_Tuple2', _0: 'color', _1: 'black'}
							]))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$core$Native_Utils.eq(model.isGameOver, true) ? _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Game Over! ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(model.winner),
								' has won!'))) : _elm_lang$html$Html$text('')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[boardStyle]),
				A2(
					_elm_lang$core$List$map,
					function (c) {
						return A2(
							_elm_lang$html$Html$div,
							_elm_lang$core$Native_List.fromArray(
								[
									cellStyle(c),
									_elm_lang$html$Html_Events$onMouseEnter(
									_user$project$Main$OnCellEnter(c)),
									_elm_lang$html$Html_Events$onMouseLeave(
									_user$project$Main$OnCellLeave(c)),
									_elm_lang$html$Html_Events$onClick(
									_user$project$Main$OnCellClick(c))
								]),
							_elm_lang$core$Native_List.fromArray(
								[]));
					},
					model.board))
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
