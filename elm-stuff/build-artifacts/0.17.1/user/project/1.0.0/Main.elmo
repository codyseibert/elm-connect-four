var _user$project$Main$updateCell = F2(
	function (cell, board) {
		return A2(
			_elm_lang$core$List$map,
			function (c) {
				return (_elm_lang$core$Native_Utils.eq(c.i, cell.i) && _elm_lang$core$Native_Utils.eq(c.j, cell.j)) ? cell : c;
			},
			board);
	});
var _user$project$Main$cartesian = F2(
	function (xs, ys) {
		return A2(
			_elm_lang$core$List$concatMap,
			function (x) {
				return A2(
					_elm_lang$core$List$map,
					function (y) {
						return {ctor: '_Tuple2', _0: x, _1: y};
					},
					ys);
			},
			xs);
	});
var _user$project$Main$Cell = F4(
	function (a, b, c, d) {
		return {i: a, j: b, hovered: c, state: d};
	});
var _user$project$Main$Red = {ctor: 'Red'};
var _user$project$Main$Blue = {ctor: 'Blue'};
var _user$project$Main$Open = {ctor: 'Open'};
var _user$project$Main$createBoard = F2(
	function (rows, cols) {
		return A2(
			_elm_lang$core$List$map,
			function (_p0) {
				var _p1 = _p0;
				return {i: _p1._0, j: _p1._1, hovered: false, state: _user$project$Main$Open};
			},
			A2(
				_user$project$Main$cartesian,
				_elm_lang$core$Native_List.range(0, rows - 1),
				_elm_lang$core$Native_List.range(0, cols - 1)));
	});
var _user$project$Main$model = {
	board: A2(_user$project$Main$createBoard, 6, 7)
};
var _user$project$Main$dropCellIntoColumn = F2(
	function (j, board) {
		var openCellsInRow = A2(
			_elm_lang$core$List$filter,
			function (c) {
				return _elm_lang$core$Native_Utils.eq(c.j, j) && _elm_lang$core$Native_Utils.eq(c.state, _user$project$Main$Open);
			},
			board);
		var openCellInRow = function (i) {
			return A2(
				_elm_lang$core$List$filter,
				function (c) {
					return _elm_lang$core$Native_Utils.eq(c.i, i);
				},
				openCellsInRow);
		};
		var rows = _elm_lang$core$List$reverse(
			_elm_lang$core$Native_List.range(0, 5));
		var cellToFill = _elm_lang$core$List$head(
			_elm_lang$core$List$concat(
				A2(_elm_lang$core$List$map, openCellInRow, rows)));
		var _p2 = cellToFill;
		if (_p2.ctor === 'Nothing') {
			return board;
		} else {
			return A2(
				_user$project$Main$updateCell,
				_elm_lang$core$Native_Utils.update(
					_p2._0,
					{state: _user$project$Main$Blue}),
				board);
		}
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'OnCellEnter':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						board: A2(
							_user$project$Main$updateCell,
							_elm_lang$core$Native_Utils.update(
								_p3._0,
								{hovered: true}),
							model.board)
					});
			case 'OnCellLeave':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						board: A2(
							_user$project$Main$updateCell,
							_elm_lang$core$Native_Utils.update(
								_p3._0,
								{hovered: false}),
							model.board)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						board: A2(_user$project$Main$dropCellIntoColumn, _p3._0.j, model.board)
					});
		}
	});
var _user$project$Main$OnCellClick = function (a) {
	return {ctor: 'OnCellClick', _0: a};
};
var _user$project$Main$OnCellLeave = function (a) {
	return {ctor: 'OnCellLeave', _0: a};
};
var _user$project$Main$OnCellEnter = function (a) {
	return {ctor: 'OnCellEnter', _0: a};
};
var _user$project$Main$view = function (model) {
	var boardStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 'background-color', _1: 'yellow'},
				{ctor: '_Tuple2', _0: 'width', _1: '700px'},
				{ctor: '_Tuple2', _0: 'height', _1: '600px'},
				{ctor: '_Tuple2', _0: 'margin', _1: '0 auto'},
				{ctor: '_Tuple2', _0: 'margin-top', _1: '40px'},
				{ctor: '_Tuple2', _0: 'position', _1: 'relative'}
			]));
	var getY = F2(
		function (i, w) {
			return (i * w) + 5;
		});
	var getX = F2(
		function (j, w) {
			return (j * w) + 5;
		});
	var cellSize = 100;
	var cellStyle = function (cell) {
		return _elm_lang$html$Html_Attributes$style(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
					{
					ctor: '_Tuple2',
					_0: 'top',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							A2(getY, cell.i, cellSize)),
						'px')
				},
					{
					ctor: '_Tuple2',
					_0: 'left',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							A2(getX, cell.j, cellSize)),
						'px')
				},
					{ctor: '_Tuple2', _0: 'background-color', _1: 'white'},
					{ctor: '_Tuple2', _0: 'width', _1: '90px'},
					{ctor: '_Tuple2', _0: 'height', _1: '90px'},
					{ctor: '_Tuple2', _0: 'border-radius', _1: '50%'},
					cell.hovered ? {ctor: '_Tuple2', _0: 'border', _1: '2px solid red'} : {ctor: '_Tuple2', _0: '', _1: ''},
					_elm_lang$core$Native_Utils.eq(cell.state, _user$project$Main$Blue) ? {ctor: '_Tuple2', _0: 'background-color', _1: 'blue'} : {ctor: '_Tuple2', _0: '', _1: ''}
				]));
	};
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[boardStyle]),
				A2(
					_elm_lang$core$List$map,
					function (c) {
						return A2(
							_elm_lang$html$Html$div,
							_elm_lang$core$Native_List.fromArray(
								[
									cellStyle(c),
									_elm_lang$html$Html_Events$onMouseEnter(
									_user$project$Main$OnCellEnter(c)),
									_elm_lang$html$Html_Events$onMouseLeave(
									_user$project$Main$OnCellLeave(c)),
									_elm_lang$html$Html_Events$onClick(
									_user$project$Main$OnCellClick(c))
								]),
							_elm_lang$core$Native_List.fromArray(
								[]));
					},
					model.board))
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$beginnerProgram(
		{model: _user$project$Main$model, view: _user$project$Main$view, update: _user$project$Main$update})
};
